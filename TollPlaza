/**
 * Jacqueline Chuang
 * APCS C Period
 * BayBridge Project
 * 11/1/21
 */

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class TollPlaza {
    private static TollBooth[] booths; // you know how many booths you have

    public TollPlaza(){
        booths = new TollBooth[7];
        for (int i = 0; i < 7; i++){
            booths[i] = new TollBooth(i + 1); // you don't want a booth 0
        }
    }

    // call all the methods for this TollPlaza class
    public void run() {

        // get user inputs for mainMenu and subMenu
        while (true) {
            int mainMenuInput = getUserInput(0);
            int subMenuInput = 0;
            if (mainMenuInput >= 1 && mainMenuInput <= 5) { // booths
                subMenuInput = getUserInput(1);
            } else if (mainMenuInput == 6) { // statistics
                subMenuInput = getUserInput(2);
            } else if (mainMenuInput == 7) { // quit
                return;
            }

            // process mainMenu and subMenu inputs
            switch (mainMenuInput){
                case 1: printAllCars(subMenuInput); break;
                case 2: printAllCashCars(subMenuInput); break;
                case 3: printAllFastrkCars(subMenuInput); break;
                case 4: printAllTollExemptCars(subMenuInput); break;
                case 5: printAllTollAmount(subMenuInput); break;
                case 6:
                    switch (subMenuInput) {
                        case 1: printAveBooth(); break;
                        case 2: printCashPercent(); break;
                        case 3: printFastrkPercent(); break;
                        case 4: printTollExemptPercent(); break;
                        case 5: printBusiestBooth(); break;
                        case 6: printMostCashBooth(); break;
                    }
                    break;
            }
        }
    }

    // prints out the main menu of the TollPlaza
    public void displayMenu() {
        System.out.println("WELCOME TO THE BAY BRIDGE TOLL PLAZA DATABASE \n");
        System.out.println("Enter a number to select one of the following functions.");
        System.out.println("1. Display all cars.");
        System.out.println("2. Display cash-paying cars.");
        System.out.println("3. Display FasTrak cars.");
        System.out.println("4. Display toll-exempt cars.");
        System.out.println("5. Display toll amount.");
        System.out.println("6. Display statistics.");
        System.out.println("7. Quit.");
    }

    // prints out the sub menu of the TollPlaza
    public void displaySubMenu() {
        System.out.println("Enter a number to select your tollbooth.");
        System.out.println("1. Booth #1.");
        System.out.println("2. Booth #2.");
        System.out.println("3. Booth #3.");
        System.out.println("4. Booth #4.");
        System.out.println("5. Booth #5.");
        System.out.println("6. Booth #6.");
        System.out.println("7. Booth #7.");
        System.out.println("8. All booths.");
    }

    // prints out the stats menu of the TollPlaza
    public void displayStatMenu() {
        System.out.println("1. Display average amount collected per booth");
        System.out.println("2. Display cash-paying cars percentage");
        System.out.println("3. Display FasTrak cars percentage");
        System.out.println("4. Display toll-exempt cars percentage");
        System.out.println("5. Display the busiest booth");
        System.out.println("6. Display the most-cash booth");
    }

    // get the user input based on the menu type (main, sub, or stats)
    public int getUserInput(int menuType) {
        Scanner userInput = new Scanner(System.in);
        while (true) {
            switch (menuType) {
                case 0:
                    displayMenu();
                    break;
                case 1:
                    displaySubMenu();
                    break;
                case 2:
                    displayStatMenu();
                    break;
            }
            if (userInput.hasNextInt()) {
                int userNum = userInput.nextInt();
                if (checkInput(menuType, userNum)) {
                    return userNum;
                }
            } else {
                userInput.nextLine();
            }
            System.out.println("Invalid Input.");
        }
    }

    // check to see whether or not the user input is invalid for menu type
    public boolean checkInput(int menuType, int userNum) {
        switch (menuType) {
            case 0:
                return (userNum >= 1 && userNum <= 7);
            case 1:
                return (userNum >= 1 && userNum <= 8);
            case 2:
                return (userNum >= 1 && userNum <= 6);
            default:
                return false;
        }
    }

    // get arraylist of cars (from getCarList method) --> print it in the right format
    private void printCarsBoothInfo(ArrayList<Car> carList) {
        if (carList.size() == 0) {
            System.out.println("None");
        } else {
            for (int i = 0; i < carList.size(); i++) {
                System.out.println(carList.get(i).getPlate() + " " + carList.get(i).getAxles());
            }
        }
    }

    // takes in the booth number and special code --> returns an arraylist (that still needs to be processed)
    private ArrayList<Car> getCarList (int input2, String code) {
        if (code.equals("ALL")) return booths[input2 - 1].getCars();
        else return booths[input2 - 1].getCarsOfCode(code);
    }

    // prints all cars in specified booth
    private int printBoothAllCars(int input2) {
        System.out.println("Booth " + input2);
        ArrayList<Car> carList = getCarList(input2,"ALL");
        printCarsBoothInfo(carList);
        System.out.println("Total cars in booth " + input2 + ": " + carList.size());
        System.out.println();
        return carList.size();
    }

    // prints cars in all booths
    private void printAllCars(int input2) {
        if (input2 <= 7) {
            printBoothAllCars(input2);
        } else {
            int totalCars = 0;
            for (int k = 1; k <= 7; k++) {
                totalCars += printBoothAllCars(k);
            }
            System.out.println("Total cars in all booths: " + totalCars);
        }
    }

    // prints all cash cars in specified booth
    private int printBoothCashCars(int input2) {
        System.out.println("Booth " + input2);
        ArrayList<Car> carList = getCarList(input2,"CASH");
        printCarsBoothInfo(carList);
        System.out.println("Total cars in booth " + input2 + ": " + carList.size());
        System.out.println();
        return carList.size();
    }

    // prints cash cars in all booths
    private void printAllCashCars(int input2) {
        if (input2 <= 7) {
            printBoothCashCars(input2);
        } else {
            int totalCars = 0;
            for (int k = 1; k <= 7; k++) {
                totalCars += printBoothCashCars(k);
            }
            System.out.println("Total cars in all booths: " + totalCars);
        }
    }

    // prints all fastrk cars in specified booth
    private int printBoothFastrkCars(int input2) {
        System.out.println("Booth " + input2);
        ArrayList<Car> carList = getCarList(input2,"FASTRK");
        printCarsBoothInfo(carList);
        System.out.println("Total cars in booth " + input2 + ": " + carList.size());
        System.out.println();
        return carList.size();
    }

    // prints fastrk cars in all booths
    private void printAllFastrkCars(int input2) {
        if (input2 <= 7) {
            printBoothFastrkCars(input2);
        } else {
            int totalCars = 0;
            for (int k = 1; k <= 7; k++) {
                totalCars += printBoothFastrkCars(k);
            }
            System.out.println("Total cars in all booths: " + totalCars);
        }
    }

    // prints all toll excempt cars in specified booth
    private int printBoothTollExemptCars(int input2) {
        int totalCars = 0;
        ArrayList<Car> carList;

        System.out.println("Booth " + input2);

        System.out.println("CALTRNS");
        carList = getCarList(input2, "CALTRNS");
        printCarsBoothInfo(carList);
        System.out.println();
        totalCars += carList.size();

        System.out.println("CHP");
        carList = getCarList(input2, "CHP");
        printCarsBoothInfo(carList);
        System.out.println();
        totalCars += carList.size();

        System.out.println("EMRGCY");
        carList = getCarList(input2, "EMRGCY");
        printCarsBoothInfo(carList);
        System.out.println();
        totalCars += carList.size();

        System.out.println("GVRMNT");
        carList = getCarList(input2, "GVRMNT");
        printCarsBoothInfo(carList);
        System.out.println();
        totalCars += carList.size();

        System.out.println("Total cars in booth " + input2 + ": " + totalCars);
        System.out.println();
        return totalCars;
    }

    // prints toll exempt cars in all booths
    private void printAllTollExemptCars(int input2) {
        if (input2 <= 7) {
            printBoothTollExemptCars(input2);
        } else {
            int totalCars = 0;
            for (int k = 1; k <= 7; k++) {
                totalCars += printBoothTollExemptCars(k);
            }
            System.out.println("Total cars in all booths: " + totalCars);
        }
    }

    // prints toll amount of specified `booth`
    private double printBoothTollAmount(int input2) {
        System.out.println("Booth " + input2);
        System.out.print("Amount: $");
        System.out.printf("%.2f\n", booths[input2 - 1].getRevenue());
        System.out.println();
        return booths[input2 - 1].getRevenue();
    }

    // prints toll amount of all booths
    private void printAllTollAmount(int input2) {
        if (input2 <= 7) {
            printBoothTollAmount(input2);
        } else {
            double totalRevenue = 0.0;
            for (int k = 1; k <= 7; k++) {
                totalRevenue += printBoothTollAmount(k);
            }
            System.out.println("All booths");
            System.out.print("Amount: $");
            System.out.printf("%.2f\n", totalRevenue);
        }
    }

    // prints toll amount of all booths
    private void printAveBooth() {
        double totalRevenue = 0;
        for (int p = 1; p <= 7; p++) {
            totalRevenue += booths[p - 1].getRevenue();
        }
        double average = totalRevenue / 7;
        System.out.print("Average: $");
        System.out.printf("%.2f\n", average);
    }

    // prints percentage of cash-paying cars
    private void printCashPercent() {
        double totalCashCars = 0;
        double totalCars = 0;
        for (int y = 1; y <= 7; y++) {
            totalCashCars += booths[y - 1].getCarsOfCode("CASH").size();
            totalCars += booths[y - 1].getCars().size();
        }
        double percentage = (totalCashCars / totalCars) * 100;
        System.out.print("Cash-paying cars percentage: ");
        System.out.printf("%.2f", percentage);
        System.out.println("%");
    }

    // prints percentage of fastrk cars
    private void printFastrkPercent() {
        double totalFastrkCars = 0;
        double totalCars = 0;
        for (int y = 1; y <= 7; y++) {
            totalFastrkCars += booths[y - 1].getCarsOfCode("FASTRK").size();
            totalCars += booths[y - 1].getCars().size();
        }
        double percentage = (totalFastrkCars / totalCars) * 100;
        System.out.print("FasTrak cars percentage: ");
        System.out.printf("%.2f", percentage);
        System.out.println("%");
    }

    // prints percentage of toll exempt cars
    private void printTollExemptPercent() {
        double totalTollExemptCars = 0;
        double totalCars = 0;
        for (int y = 1; y <= 7; y++) {
            totalTollExemptCars += booths[y - 1].getCarsOfCode("CHP").size();
            totalTollExemptCars += booths[y - 1].getCarsOfCode("CALTRNS").size();
            totalTollExemptCars += booths[y - 1].getCarsOfCode("GVRMNT").size();
            totalTollExemptCars += booths[y - 1].getCarsOfCode("EMRGCY").size();
            totalCars += booths[y - 1].getCars().size();
        }
        double percentage = (totalTollExemptCars / totalCars) * 100;
        System.out.print("Toll-exempt cars percentage: ");
        System.out.printf("%.2f", percentage);
        System.out.println("%");
    }

    // prints busiest booth (booth with most cars)
    private void printBusiestBooth() {
        int busiestBooth = 1;
        for (int t = 2; t <= 7; t++) {
            if (booths[busiestBooth - 1].getCars().size() < booths[t - 1].getCars().size()) {
                busiestBooth = t;
            }
        }
        System.out.println("Booth " + busiestBooth + ": " + booths[busiestBooth - 1].getCars().size());
    }

    // prints most cash booth (booth with most revenue)
    private void printMostCashBooth() {
        int mostCashBooth = 1;
        for (int t = 2; t <= 7; t++) {
            if (booths[mostCashBooth - 1].getRevenue() < booths[t - 1].getRevenue()) {
                mostCashBooth = t;
            }
        }
        System.out.print("Booth " + mostCashBooth + ": $");
        System.out.printf("%.2f\n", booths[mostCashBooth - 1].getRevenue());
    }

    // generate cars, read file, create car objects, and load into corresponding tollbooths
    public static void loadCarInfo() throws IOException {
        String carObject;
        int boothNumber;
        String licensePlate;
        int numOfAxles;
        String specialCode;

        // creates a txt file that contains info of some number cars
        InputGenerator.generateCars(50, 30, 10, 20, 10, 10, 20);

        // read one line at a time, extract booth number, extract license plate, special code, and axle to make the car,
        // then add one car to the corresponding booth
        Scanner fileReader = new Scanner(new File("textFile.dat"));
        while (fileReader.hasNextLine()) {
            carObject = fileReader.nextLine();
            int indexOfFirstSpace = carObject.indexOf(" ");
            boothNumber = Integer.parseInt(carObject.substring(0, indexOfFirstSpace));
            carObject = carObject.substring(indexOfFirstSpace + 1);
            int indexOfFirstSpace2 = carObject.indexOf(" ");
            licensePlate = carObject.substring(0, indexOfFirstSpace2);
            carObject = carObject.substring(indexOfFirstSpace2 + 1);
            int indexOfFirstSpace3 = carObject.indexOf(" ");
            numOfAxles = Integer.parseInt(carObject.substring(0, indexOfFirstSpace3));
            specialCode = carObject.substring(indexOfFirstSpace3 + 1);

            Car c = new Car (licensePlate, numOfAxles, specialCode);

            booths[boothNumber - 1].addCar(c);
        }
        for (int i = 0; i < booths.length; i++) {
            booths[i].setRevenue(booths[i].calculateRevenue());
        }
    }

}
